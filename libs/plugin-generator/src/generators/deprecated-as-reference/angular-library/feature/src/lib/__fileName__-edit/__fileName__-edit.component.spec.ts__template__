import { NO_ERRORS_SCHEMA } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { ActivatedRoute } from '@angular/router';
import { subscribeSpyTo } from '@hirez_io/observer-spy';
import { <%= className %>Service } from '@seed/<%= scopeFileName %>/<%= fileName %>/data-access';
import { <%= className %> } from '@seed/<%= scopeFileName %>/<%= fileName %>/model';
import { RDEValue } from '@seed/shared/model';
import { SharedSpecModule } from '@seed/shared/module';
import { of, throwError } from 'rxjs';

import { <%= className %>EditComponent } from './<%= fileName %>-edit.component';

describe('<%= className %>EditComponent', () => {
  let component: <%= className %>EditComponent;
  let fixture: ComponentFixture<<%= className %>EditComponent>;
  const <%= propertyName %>ServiceStub = {
    update<%= className %>: jest.fn(),
    selected<%= className %>$: of({
      id: '<%= propertyName %>-id',
      entity: { name: 'Updated Name', id: '<%= propertyName %>-id' },
    } as RDEValue<<%= className %>>),
    refreshList: jest.fn(),
    select<%= className %>: jest.fn(),
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SharedSpecModule, NoopAnimationsModule],
      declarations: [<%= className %>EditComponent],
      providers: [
        {
          provide: <%= className %>Service,
          useValue: <%= propertyName %>ServiceStub,
        },
        { provide: ActivatedRoute, useValue: {} },
      ],
      schemas: [NO_ERRORS_SCHEMA],
    }).compileComponents();

    fixture = TestBed.createComponent(<%= className %>EditComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should edit <%= propertyName %> when confirm', async () => {
    const formValue = { name: 'Updated Name' };
    component.<%= propertyName %>Form.setValue(formValue);

    <%= propertyName %>ServiceStub.update<%= className %>.mockImplementation(id => of(formValue));

    component.save();

    const observerSpy = subscribeSpyTo(component.edit$);

    expect(<%= propertyName %>ServiceStub.update<%= className %>).toBeCalledWith('<%= propertyName %>-id', formValue);
  });

  it('should catchError if update <%= propertyName %> fails', () => {
    const formValue = { name: 'Updated Name' };
    component.<%= propertyName %>Form.setValue(formValue);
    <%= propertyName %>ServiceStub.update<%= className %>.mockReturnValueOnce(throwError(() => new Error('fail')));

    component.save();

    const observerSpy = subscribeSpyTo(component.edit$);

    expect(<%= propertyName %>ServiceStub.update<%= className %>).toBeCalledWith('<%= propertyName %>-id', formValue);
  });
});

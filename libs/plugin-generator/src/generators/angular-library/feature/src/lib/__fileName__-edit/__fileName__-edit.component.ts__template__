import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { <%= className %>Service } from '@seed/<%= scopeFileName %>/<%= fileName %>/data-access';
import { api } from '@seed/shared/util';
import { filter, share, Subject, switchMap, take } from 'rxjs';

@Component({
  selector: 'seed-<%= fileName %>-edit',
  templateUrl: './<%= fileName %>-edit.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= className %>EditComponent implements OnInit {
  constructor(public <%= propertyName %>Service: <%= className %>Service, private router: Router, private route: ActivatedRoute) {}

  <%= propertyName %>Form = new FormGroup({
    name: new FormControl('', { nonNullable: true, validators: [Validators.required] }),
  });

  private saveSubject = new Subject<void>();

  edit$ = this.saveSubject.pipe(
    switchMap(() => this.<%= propertyName %>Service.selected<%= className %>$.pipe(filter(Boolean))),
    switchMap(<%= propertyName %> => {
      return this.<%= propertyName %>Service.update<%= className %>(<%= propertyName %>.id, this.<%= propertyName %>Form.value).pipe(
        api(() => {
          this.cancel();
        }),
      );
    }),
    share(),
  );

  cancel() {
    this.<%= propertyName %>Service.select<%= className %>(null);
    this.router.navigate(['../../..'], { relativeTo: this.route });
  }

  save() {
    this.saveSubject.next();
  }

  ngOnInit() {
    // init form
    this.<%= propertyName %>Service.selected<%= className %>$.pipe(filter(Boolean), take(1)).subscribe(<%= propertyName %> => {
      this.<%= propertyName %>Form.setValue({
        name: <%= propertyName %>.name,
      });
    });
  }
}

/* Copyright (c) 2023 VMware, Inc. All rights reserved. -- VMware Confidential */
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { NgxsRouterPluginModule } from '@ngxs/router-plugin';
import { NgxsModule, Store } from '@ngxs/store';
import { of } from 'rxjs';

import {
   getProjectPlusNamespaceIdKey,
   initializeCommonK8sStoreForTest,
   keyMockProject1MockNs1,
   mockNs1,
   mockProject,
   NamespaceId,
   NGXS_DEV_OPTIONS,
} from '@ccs-ui/sdk-utils';
import {
   <%= fullName %>ApiService,
   <%= fullName %>State,
   <%= fullName %>StateSelectors,
   GlobalServiceMap,
   RefreshServices,
} from '@ccs-ui/<%= name %>-data-access';

import { SERVICE_NAME2, SERVICES_MOCK } from '../test/mocks';

const NS_SERVICES_MOCK: GlobalServiceMap = {};
NS_SERVICES_MOCK[keyMockProject1MockNs1] = SERVICES_MOCK;

// noinspection JSUnusedGlobalSymbols
const Mock<%= fullName %>ApiService = {
   getServiceList$: (namespaceId: NamespaceId) => {
      return of(NS_SERVICES_MOCK[getProjectPlusNamespaceIdKey(namespaceId)]);
   },
};

describe('<%= fullName %>State', () => {
   let store: Store;

   beforeEach(async () => {
      await TestBed.configureTestingModule({
         imports: [
            NgxsModule.forRoot([<%= fullName %>State], NGXS_DEV_OPTIONS),
            NgxsRouterPluginModule.forRoot(),
            RouterTestingModule.withRoutes([]),
         ],
         providers: [
            {
               provide: <%= fullName %>ApiService,
               useValue: Mock<%= fullName %>ApiService,
            },
         ],
         declarations: [],
      }).compileComponents();

      store = initializeCommonK8sStoreForTest();
      store.reset({
         // store.snapshot allows to add default state values before overriding
         ...store.snapshot(),
         router: {
            state: {
               projectName: mockProject,
               namespaceName: mockNs1,
            },
         },
      });
   });

   it('RefreshServices action+selector', () => {
      let actual = store.selectSnapshot(<%= fullName %>StateSelectors.allServices);
      expect(actual).toEqual([]);

      store.dispatch(new RefreshServices());

      actual = store.selectSnapshot(<%= fullName %>StateSelectors.allServices);
      expect(actual).toEqual(SERVICES_MOCK);
   });

   it('selectedService routing+selector', () => {
      let actual = store.selectSnapshot(<%= fullName %>StateSelectors.selectedService);
      expect(actual).toBeUndefined();

      store.reset({
         ...store.snapshot(),
         router: {
            state: {
               projectName: mockProject,
               namespaceName: mockNs1,
               objectName: 'unknown',
            },
         },
         <%= camelName %>State: {
            allServices: NS_SERVICES_MOCK,
         },
      });

      actual = store.selectSnapshot(<%= fullName %>StateSelectors.selectedService);
      expect(actual).toBeUndefined();

      store.reset({
         ...store.snapshot(),
         router: {
            state: {
               projectName: mockProject,
               namespaceName: mockNs1,
               objectName: SERVICE_NAME2,
            },
         },
      });

      actual = store.selectSnapshot(<%= fullName %>StateSelectors.selectedService);
      expect(actual).toEqual(SERVICES_MOCK.find((obj) => obj.name === SERVICE_NAME2));
   });
});

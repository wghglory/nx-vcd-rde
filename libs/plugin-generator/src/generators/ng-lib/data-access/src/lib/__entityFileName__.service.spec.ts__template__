import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { subscribeSpyTo } from '@hirez_io/observer-spy';
import { <%= entityClassName %> } from '@seed/<%= directory %>/model';
import { RDEList, RDEValue } from '@seed/shared/model';

import { <%= entityClassName %>Service } from './<%= entityFileName %>.service';

describe('<%= entityClassName %>Service', () => {
  let service: <%= entityClassName %>Service;
  let controller: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
    });
    service = TestBed.inject(<%= entityClassName %>Service);
    controller = TestBed.inject(HttpTestingController);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('get <%= entityPropertyName %>s', () => {
    service.get<%= entityClassName %>List({ page: 1 }).subscribe();

    const request = controller.expectOne(req => req.method === 'GET' && req.url.includes('api/<%= entityFileName %>s'));

    // Assert that the request is a GET.
    expect(request.request.method).toEqual('GET');

    const data = {
      resultTotal: 1,
      pageCount: 1,
      page: 1,
      pageSize: 10,
      associations: [],
      values: [
        {
          entity: {
            // TODO
          },
        },
      ],
    } as RDEList<<%= entityClassName %>>;
    request.flush(data);
  });

  it('get single <%= entityPropertyName %>', () => {
    service.get<%= entityClassName %>('mockId').subscribe();

    const request = controller.expectOne(req => req.method === 'GET' && req.url.includes('api/<%= entityFileName %>s/mockId'));

    // Assert that the request is a GET.
    expect(request.request.method).toEqual('GET');
    request.flush({
      entity: {
        id: 'mockId',
        // TODO
      },
    } as RDEValue<<%= entityClassName %>>);
  });

  it('add a <%= entityPropertyName %>', () => {
    const payload = { }; // TODO
    service.add<%= entityClassName %>(payload).subscribe();

    const request = controller.expectOne(req => req.method === 'POST' && req.url.includes('api/<%= entityFileName %>s'));

    // Assert that the request is a POST.
    expect(request.request.method).toEqual('POST');
    request.flush({
      entity: payload,
    } as RDEValue<<%= entityClassName %>>);
  });

  it('delete a <%= entityPropertyName %>', () => {
    service.delete<%= entityClassName %>('mockId').subscribe();

    const request = controller.expectOne(req => req.method === 'DELETE' && req.url.includes('api/<%= entityFileName %>s/mockId'));

    // Assert that the request is a DELETE.
    expect(request.request.method).toEqual('DELETE');
    request.flush(null);
  });

  it('update a <%= entityPropertyName %>', () => {
    const payload = { }; // TODO
    service.update<%= entityClassName %>('mockId', payload).subscribe();

    const request = controller.expectOne(req => req.method === 'PATCH' && req.url.includes('api/<%= entityFileName %>s/mockId'));

    // Assert that the request is a PATCH.
    expect(request.request.method).toEqual('PATCH');
    request.flush({
      entity: payload,
    } as RDEValue<<%= entityClassName %>>);
  });

  it('refresh list', () => {
    service.refreshList();

    expect(subscribeSpyTo(service.refresh$).getFirstValue()).toBeUndefined();
  });

  it('select <%= entityPropertyName %>', () => {
    const <%= entityPropertyName %> = {
      id: 'mockId',
      // TODO
    } as <%= entityClassName %>;

    service.select<%= entityClassName %>(<%= entityPropertyName %>);

    expect(subscribeSpyTo(service.selected<%= entityClassName %>$).getFirstValue()).toEqual(<%= entityPropertyName %>);
  });

  afterEach(() => {
    // After every test, assert that there are no more pending requests.
    controller.verify();
  });
});

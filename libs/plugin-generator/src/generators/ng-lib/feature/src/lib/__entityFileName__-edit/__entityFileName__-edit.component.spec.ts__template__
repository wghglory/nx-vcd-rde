import { NO_ERRORS_SCHEMA } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { ActivatedRoute } from '@angular/router';
import { subscribeSpyTo } from '@hirez_io/observer-spy';
import { <%= entityClassName %>Service } from '@seed/<%= directory %>/data-access';
import { <%= entityClassName %> } from '@seed/<%= directory %>/model';
import { RDEValue } from '@seed/shared/model';
import { SharedSpecModule } from '@seed/shared/module';
import { of, throwError } from 'rxjs';

import { <%= entityClassName %>EditComponent } from './<%= entityFileName %>-edit.component';

describe('<%= entityClassName %>EditComponent', () => {
  let component: <%= entityClassName %>EditComponent;
  let fixture: ComponentFixture<<%= entityClassName %>EditComponent>;
  const <%= entityPropertyName %>ServiceStub = {
    update<%= entityClassName %>: jest.fn(),
    selected<%= entityClassName %>$: of({
      id: '<%= entityPropertyName %>-id',
      entity: { name: 'Updated Name', id: '<%= entityPropertyName %>-id' },
    } as RDEValue<<%= entityClassName %>>),
    refreshList: jest.fn(),
    select<%= entityClassName %>: jest.fn(),
  };

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SharedSpecModule, NoopAnimationsModule],
      declarations: [<%= entityClassName %>EditComponent],
      providers: [
        {
          provide: <%= entityClassName %>Service,
          useValue: <%= entityPropertyName %>ServiceStub,
        },
        { provide: ActivatedRoute, useValue: {} },
      ],
      schemas: [NO_ERRORS_SCHEMA],
    }).compileComponents();

    fixture = TestBed.createComponent(<%= entityClassName %>EditComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should edit <%= entityPropertyName %> when confirm', async () => {
    const formValue = { name: 'Updated Name' };
    component.<%= entityPropertyName %>Form.setValue(formValue);

    <%= entityPropertyName %>ServiceStub.update<%= entityClassName %>.mockImplementation(id => of(formValue));

    component.save();

    const observerSpy = subscribeSpyTo(component.edit$);

    expect(<%= entityPropertyName %>ServiceStub.update<%= entityClassName %>).toBeCalledWith('<%= entityPropertyName %>-id', formValue);
  });

  it('should catchError if update <%= entityPropertyName %> fails', () => {
    const formValue = { name: 'Updated Name' };
    component.<%= entityPropertyName %>Form.setValue(formValue);
    <%= entityPropertyName %>ServiceStub.update<%= entityClassName %>.mockReturnValueOnce(throwError(() => new Error('fail')));

    component.save();

    const observerSpy = subscribeSpyTo(component.edit$);

    expect(<%= entityPropertyName %>ServiceStub.update<%= entityClassName %>).toBeCalledWith('<%= entityPropertyName %>-id', formValue);
  });
});
